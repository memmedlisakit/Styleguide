///* Animations and keyframes
//-------------------------------------*/

.animation-simple(@str) {
  -webkit-animation: @str;
  -moz-animation: @str;
  -ms-animation: @str;
  -o-animation: @str;
  animation: @str;
}

///* Margin mixin
//-------------------------------------*/
.marg-topNbottom (@arg) {
  margin-top: @arg;
  margin-bottom: @arg;
}

.marg-leftNright (@arg) {
  margin-left: @arg;
  margin-right: @arg;
}

///* Padding mixin
//-------------------------------------*/
.padd-topNbottom (@arg) {
  padding-top: @arg;
  padding-bottom: @arg;
}

.padd-leftNright (@arg) {
  padding-left: @arg;
  padding-right: @arg;
}

///* Border mixin
//-------------------------------------*/
.border-topNbottom (...) {
  border-top: @arguments;
  border-bottom: @arguments;
}

.border-leftNright (...) {
  border-left: @arguments;
  border-right: @arguments;
}

///* Absolute and Fixed Positioned
//-------------------------------------*/
.abs-pos (@top: auto; @right: auto; @bottom: auto; @left: auto) {
  & when not (@top = auto) {
    top: @top;
  }
  & when not (@right = auto) {
    right: @right;
  }
  & when not (@bottom = auto) {
    bottom: @bottom;
  }
  & when not (@left = auto) {
    left: @left;
  }
  position: absolute;
}

.fix-pos (@top: auto; @right: auto; @bottom: auto; @left: auto) {
  & when (ispixel(@top)) {
    top: @top;
  }
  & when (ispixel(@right)) {
    right: @right;
  }
  & when (ispixel(@bottom)) {
    bottom: @bottom;
  }
  & when (ispixel(@left)) {
    left: @left;
  }
  position: fixed;
}

///* Responsive Breakpoints
//-------------------------------------*/
.breakpoint(@min: 0; @max: 0; @rules) {

  // breakpoint by bootstrap classes
  & when (isstring(@min)) {

    & when (@min = 'visible-xs') {
      //  SCREEN < 767px
      @media (max-width: @screen-xs-max) { @rules();
      }
    }
    & when (@min = 'visible-sm') {
      // 768px < SCREEN > 991px
      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { @rules();
      }
    }
    & when (@min = 'visible-md') {
      // 992px < SCREEN > 1199px
      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) { @rules();
      }
    }
    & when (@min = 'visible-lg') {
      //  SCREEN > 1200px
      @media (min-width: @screen-lg-min) { @rules();
      }
    }

  }

  // breakpoints by screen values
  & when not (isstring(@min)) {

    & when (@min > 0) and (@max > 0) {
      @media (min-width: @min) and (max-width: @max) {
        @rules();
      }
    }

    & when (@min > 0) and (@max = 0) {
      @media (min-width: @min) {
        @rules();
      }
    }

    & when (@min = 0) and (@max > 0) {
      @media (max-width: @max) {
        @rules();
      }
    }

  }
}

///* Transform
//-------------------------------------*/
.transform(...) {
  -webkit-transform: @arguments;
  -ms-transform: @arguments; // IE9 only
  -o-transform: @arguments;
  transform: @arguments;
}

.backface-visibility(...) {
  -webkit-backface-visibility: @arguments;
  -moz-backface-visibility: @arguments;
  -ms-backface-visibility: @arguments;
  backface-visibility: @arguments;
}

///// Image responsive inline
.img-responsive-inline {
  max-width: 100%;
  display: inline-block;
  height: auto;
}


///* Accessories
//-------------------------------------*/
/// arrow
.right-border-arrow(@width: 10px, @height: 12px, @color: red, @border-color: green, @bg-color: white) {
  @h: @height / 2;
  @w: @width;
  @h2: @h - 1;
  @w2: @width - 1;

  &:after,
  &:before {
    content: '';
    display: block;
    position: absolute;
    left: 100%;
    width: 0;
    height: 0;
    border-style: solid;
  }

  &:after {
    top: 1px;
    border-color: transparent transparent transparent @color;
    border-width: @h2 0 @h2 @w2;
    z-index: 11;
  }

  &:before {
    right: -@width;
    top: 0px;
    border-width: @h 0 @h @width;
    border-color: transparent transparent transparent @border-color;
    background: @bg-color;
    z-index: 10;
  }
}

// Triangle Mixin
.triangle-base() {
  content: '';
  display: block;
  width: 0;
  height: 0;
  -moz-transform: scale(.9999);
}
.triangle(@direction, @size, @color) {
  .triangle(@direction, @size * 2, @size, @color);
}
.triangle(@direction, @width, @height, @color) when (@direction = up) {
  .triangle-base();
  border-left: (@width / 2) solid transparent;
  border-right: (@width / 2) solid transparent;
  border-bottom: @height solid @color;
}
.triangle(@direction, @width, @height, @color) when (@direction = down) {
  .triangle-base();
  border-left: (@width / 2) solid transparent;
  border-right: (@width / 2) solid transparent;
  border-top: @height solid @color;
}
.triangle(@direction, @width, @height, @color) when (@direction = left) {
  .triangle-base();
  border-top: (@width / 2) solid transparent;
  border-bottom: (@width / 2) solid transparent;
  border-right: @height solid @color;
}
.triangle(@direction, @width, @height, @color) when (@direction = right) {
  .triangle-base();
  border-top: (@width / 2) solid transparent;
  border-bottom: (@width / 2) solid transparent;
  border-left: @height solid @color;
}


///* Making custom Bootstrap grids
//-------------------------------------*/
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@wt-grid-columns`.

.wt-make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .wt-col(@index) { // initial
    @item: ~".wt-col-xs-@{index}, .wt-col-sm-@{index}, .wt-col-md-@{index}, .wt-col-lg-@{index}";
    .wt-col((@index + 1), @item);
  }
  .wt-col(@index, @list) when (@index =< @wt-grid-columns) { // general; "=<" isn't a typo
    @item: ~".wt-col-xs-@{index}, .wt-col-sm-@{index}, .wt-col-md-@{index}, .wt-col-lg-@{index}";
    .wt-col((@index + 1), ~"@{list}, @{item}");
  }
  .wt-col(@index, @list) when (@index > @wt-grid-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  (@wt-grid-gutter-width / 2);
      padding-right: (@wt-grid-gutter-width / 2);
    }
  }
  .wt-col(1); // kickstart it
}

.wt-float-grid-columns(@class) {
  .wt-col(@index) { // initial
    @item: ~".wt-col-@{class}-@{index}";
    .wt-col((@index + 1), @item);
  }
  .wt-col(@index, @list) when (@index =< @wt-grid-columns) { // general
    @item: ~".wt-col-@{class}-@{index}";
    .wt-col((@index + 1), ~"@{list}, @{item}");
  }
  .wt-col(@index, @list) when (@index > @wt-grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .wt-col(1); // kickstart it
}

.wt-calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .wt-col-@{class}-@{index} {
    width: percentage((@index / @wt-grid-columns));
  }
}
.wt-calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .wt-col-@{class}-push-@{index} {
    left: percentage((@index / @wt-grid-columns));
  }
}
.wt-calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .wt-col-@{class}-push-0 {
    left: auto;
  }
}
.wt-calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .wt-col-@{class}-pull-@{index} {
    right: percentage((@index / @wt-grid-columns));
  }
}
.wt-calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .wt-col-@{class}-pull-0 {
    right: auto;
  }
}
.wt-calc-grid-column(@index, @class, @type) when (@type = offset) {
  .wt-col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @wt-grid-columns));
  }
}

// Basic looping in LESS
.wt-loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .wt-calc-grid-column(@index, @class, @type);
  // next iteration
  .wt-loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.wt-make-grid(@class) {
  .wt-float-grid-columns(@class);
  .wt-loop-grid-columns(@wt-grid-columns, @class, width);
  .wt-loop-grid-columns(@wt-grid-columns, @class, pull);
  .wt-loop-grid-columns(@wt-grid-columns, @class, push);
  .wt-loop-grid-columns(@wt-grid-columns, @class, offset);
}